#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    exec = require("child_process").exec,
    sys = require("util"),
    comb = require("comb"),
    string = comb.string,
    it = require("../index");
var program = require('commander');


program
    .version('0.0.1')
    .option('-d, --directory <path>', 'Directory of tests')
    .option('-r, --reporter [string]', 'reporter')
    .option('--reporters', 'display available reporters')
    .on("reporters", function () {
        console.log(["", "Reporters:", "\tspec", "\tdotmatrix", ""].join("\n"));
        process.exit();
    })
    .parse(process.argv);

var prog = program.args.shift() || null;
var directory = program.directory || process.cwd() + "/test";

if (program.reporter) {
    it.reporter = program.reporter;
}

var COVERAGE_HEADER = string.format('\n %s \n', string.style("Test Coverage", "bold"));
var TABLE_SEP = string.format("+%--42s+%--11s+%--6s+%--7s+%--7s+", "-", "-", "-", "-", "-");
TABLE_SEP = comb.hitch(string, "format", TABLE_SEP + "\n%s\n" + TABLE_SEP)
var PRINT_FORMAT = comb.hitch(string, "format", "| %-40s | %9s | %4s | %5s | %6s|");

var printFile = function (file) {
    sys.error(PRINT_FORMAT(file.name, "" + file.coverage, "" + file.LOC, "" + file.SLOC, "" + file.totalMisses));
};

var printFileSource = function (file) {
    if (file.coverage < 100) {
        sys.error(string.format('\n %s \n %s \n' + string.style(file.name, "bold"), file.source));
    }
}

var reportCoverageTable = function (cov) {
    // Stats
    var print = sys.error;
    print(COVERAGE_HEADER);
    print(TABLE_SEP(PRINT_FORMAT('Filename', 'Coverage', 'LOC', 'SLOC', 'Missed')));
    cov.files.forEach(printFile);
    print(TABLE_SEP(PRINT_FORMAT("Total", "" + cov.coverage, "" + cov.LOC, "" + cov.SLOC, "" + cov.totalMisses)));
    // Source
    cov.files.forEach(printFileSource);
}

var coverage = function (data, val) {
    var n = 0;
    for (var i = 0, len = data.length; i < len; ++i) {
        if (data[i] !== undefined && Boolean(data[i]) == val) ++n;
    }
    return n;
}

var populateCoverage = function (cov) {
    cov.LOC = cov.SLOC = cov.totalHits = cov.totalMisses = cov.coverage = 0;
    var files = [];
    for (var name in cov) {
        var file = cov[name];
        if (comb.isArray(file)) {
            // Stats
            files.push(file);
            delete cov[name];
            cov.totalHits += file.totalHits = coverage(file, true);
            cov.totalMisses += file.totalMisses = coverage(file, false);
            cov.SLOC += file.SLOC = file.totalHits + file.totalMisses;
            !file.source && (file.source = []);
            cov.LOC += file.LOC = file.source.length;
            file.coverage = ((file.totalHits / file.SLOC) * 100).toFixed(2);
            // Source
            file.name = name;
            if (file.coverage < 100) {
                var width = file.source.length.toString().length;
                file.source = file.source.map(
                    function (line, i) {
                        ++i;
                        var hits = file[i] === 0 ? 0 : (file[i] || ' ');
                        if (hits === 0) {
                            hits = string.style(string.pad(hits, 5, null, true), ["bold", "red"]);
                            line = string.style(line, "redBackground");
                        } else {
                            hits = string.style(string.pad(hits, 5, null, true), "bold");
                        }
                        return string.format('\n %-' + width + 's | %s | %s', "" + i, "" + hits, "" + line);
                    }).join('');
            }
        }
    }
    cov.coverage = ((cov.totalHits / cov.SLOC) * 100).toFixed(2);
    cov.files = files;
}

var showCoverage = function () {
    if (typeof _$jscoverage === 'object') {
        populateCoverage(_$jscoverage);
        if (_$jscoverage.coverage) {
            reportCoverageTable(_$jscoverage);
        }
    }
}


var runTests = function (files) {
    files.forEach(function (f) {
        f && require(f);
    });
    return it.run();
};

var startTests = function () {
    var ret = new comb.Promise();
    if (prog) {
        console.log(prog);
        runTests([path.resolve(prog)]);
    } else {
        exec("find \"" + directory + "\" -name *.test.js", function (err, stdout) {
            if (err) ret.errback(err);
            var files = stdout.split("\n").map(function (f) {
                if (f !== '') {
                    return path.resolve(f);
                }
            });
            if (files.length) {
                runTests(files).then(comb.hitch(ret, "callback"), comb.hitch(ret, "errback"));
            } else {
                ret.callback();
            }

        });
    }
    return ret;
};


var orig = process.emit;
process.emit = function (event) {
    if (event === 'exit') {
        showCoverage();
        orig.apply(this, arguments);
    } else {
        orig.apply(this, arguments);
    }
};
startTests().addErrback(function (error) {
    console.log(error);
});



